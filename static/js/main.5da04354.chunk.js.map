{"version":3,"sources":["components/LocationDetails.js","components/ForecastSummary.js","components/ForecastSummaries.js","components/ForecastDetails.js","components/SearchForm.js","requests/getForecast.js","components/App.js","index.js"],"names":["LocationDetails","props","city","country","errorMessage","className","defaultProps","ForecastSummary","date","description","icon","temperature","onSelect","data-testid","moment","format","name","iconId","max","type","onClick","ForecastSummaries","forecasts","onForecastSelect","map","forecast","toString","ForecastDetails","humidity","wind","min","speed","direction","toUpperCase","SearchForm","searchText","setSearchText","onSubmit","onChange","event","target","value","getForecast","setSelectedDate","setForecasts","setLocation","setErrorMessage","endpoint","axios","get","then","response","data","location","catch","error","status","console","App","useState","selectedDate","selectedForecast","find","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5da04354.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LocationDetails = (props) => {\n  const { city, country, errorMessage } = props;\n  return errorMessage ? (\n    <h1>{errorMessage}</h1>\n  ) : (\n    <h1 className=\"location-details\">{`${city}, ${country}`}</h1>\n  );\n};\n\nLocationDetails.propTypes = {\n  city: PropTypes.string.isRequired,\n  country: PropTypes.string.isRequired,\n  errorMessage: PropTypes.string,\n};\n\nLocationDetails.defaultProps = {\n  errorMessage: \"\",\n};\n\nexport default LocationDetails;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/ForecastSummary.css\";\nimport WeatherIcon from \"react-icons-weather\";\nimport moment from \"moment\";\n\nconst ForecastSummary = (props) => {\n  const { date, description, icon, temperature, onSelect } = props;\n\n  return (\n    <div className=\"forecast-summary\" data-testid=\"forecast-summary\">\n      <div className=\"forecast-summary__date\">\n        {moment(date).format(\"ddd Do MMM\")}\n      </div>\n      <div className=\"forecast-summary__icon\" data-testid=\"forecast-icon\">\n        <WeatherIcon name=\"owm\" iconId={icon} />\n      </div>\n      <div className=\"forecast-summary__temperature\">\n        {temperature.max}\n        &deg;C\n      </div>\n      <div className=\"forecast-summary__description\">{description}</div>\n      <button type=\"button\" onClick={() => onSelect(date)}>\n        More details\n      </button>\n    </div>\n  );\n};\n\nexport default ForecastSummary;\n\nForecastSummary.propTypes = {\n  date: PropTypes.number.isRequired,\n  description: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n  temperature: PropTypes.shape({\n    min: PropTypes.number,\n    max: PropTypes.number,\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ForecastSummary from \"./ForecastSummary\";\nimport \"../styles/ForecastSummaries.css\";\n\nconst ForecastSummaries = ({ forecasts, onForecastSelect }) => {\n  return (\n    <div className=\"forecast-summaries\">\n      {forecasts.map((forecast) => (\n        <ForecastSummary\n          key={forecast.date}\n          date={forecast.date}\n          description={forecast.description}\n          icon={forecast.icon.toString()}\n          temperature={forecast.temperature}\n          onSelect={onForecastSelect}\n        />\n      ))}\n    </div>\n  );\n};\n\nForecastSummaries.propTypes = {\n  forecasts: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.number.isRequired,\n      description: PropTypes.string.isRequired,\n      icon: PropTypes.number.isRequired,\n      temperature: PropTypes.shape({\n        min: PropTypes.number,\n        max: PropTypes.number,\n      }).isRequired,\n    })\n  ).isRequired,\n  onForecastSelect: PropTypes.func.isRequired,\n};\n\nexport default ForecastSummaries;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/ForecastDetails.css\";\nimport moment from \"moment\";\n\nconst ForecastDetails = ({ forecast }) => {\n  const { date, temperature, humidity, wind } = forecast;\n\n  return (\n    <div className=\"forecast-details\" data-testid=\"forecast-details\">\n      <div className=\"forecast-details__date\">\n        {moment(date).format(\"ddd Do MMM\")}\n      </div>\n      <div className=\"forecast-details__temperature\">\n        {`Max temp: ${temperature.max}`}&deg;C\n      </div>\n      <div className=\"forecast-details__temperature\">\n        {`Min temp: ${temperature.min}`}&deg;C\n      </div>\n      <div className=\"forecast-details__humidity\" data-testid=\"forecast-icon\">\n        Humidity: {humidity}%\n      </div>\n      <div className=\"forecast-details__wind\">Wind speed: {wind.speed}mph</div>\n      <div className=\"forecast-details__direction\">\n        Wind direction: {wind.direction.toUpperCase()}\n      </div>\n    </div>\n  );\n};\n\nexport default ForecastDetails;\n\nForecastDetails.propTypes = {\n  forecast: PropTypes.shape({\n    date: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    temperature: PropTypes.shape({\n      max: PropTypes.number,\n      min: PropTypes.number,\n    }).isRequired,\n    wind: PropTypes.shape({\n      speed: PropTypes.number,\n      direction: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SearchForm = ({ searchText, setSearchText, onSubmit }) => {\n  const handleInputChange = (event) => {\n    setSearchText(event.target.value);\n  };\n\n  return (\n    <div className=\"search-form\">\n      <input type=\"text\" onChange={handleInputChange} value={searchText} />\n      <button type=\"submit\" onClick={onSubmit} className=\"search-form__button\">\n        Search\n      </button>\n    </div>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  setSearchText: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","/* eslint-disable no-console */\n\nimport axios from \"axios\";\n\nconst getForecast = (\n  searchText,\n  setSelectedDate,\n  setForecasts,\n  setLocation,\n  setErrorMessage\n) => {\n  let endpoint = \"https://mcr-codes-weather-app.herokuapp.com/forecast\";\n\n  if (searchText) {\n    endpoint += `?city=${searchText}`;\n  }\n\n  return axios\n    .get(endpoint)\n    .then((response) => {\n      setSelectedDate(response.data.forecasts[0].date);\n      setForecasts(response.data.forecasts);\n      setLocation(response.data.location);\n      setErrorMessage();\n    })\n    .catch((error) => {\n      const { status } = error.response;\n      if (status === 404) {\n        setErrorMessage(\n          \"Currently only UK towns/cities. Is your spelling correct?\"\n        );\n        console.error(\"Location is not valid\", error);\n      }\n      if (status === 500) {\n        setErrorMessage(\n          \"Oops, server problems on our end, sorry! Try again later. :)\"\n        );\n        console.error(\"Server error\", error);\n      }\n    });\n};\n\nexport default getForecast;\n","import React, { useState, useEffect } from \"react\";\nimport LocationDetails from \"./LocationDetails\";\nimport ForecastSummaries from \"./ForecastSummaries\";\nimport ForecastDetails from \"./ForecastDetails\";\nimport SearchForm from \"./SearchForm\";\nimport getForecast from \"../requests/getForecast\";\nimport \"../styles/App.css\";\n\nconst App = () => {\n  const [forecasts, setForecasts] = useState([]);\n  const [location, setLocation] = useState({ city: \"\", country: \"\" });\n  const [selectedDate, setSelectedDate] = useState(0);\n  const selectedForecast = forecasts.find(\n    (forecast) => forecast.date === selectedDate\n  );\n  const [searchText, setSearchText] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleForecastSelect = (date) => {\n    setSelectedDate(date);\n  };\n\n  const handleCitySearch = () => {\n    getForecast(\n      searchText,\n      setSelectedDate,\n      setForecasts,\n      setLocation,\n      setErrorMessage\n    );\n  };\n\n  useEffect(() => {\n    getForecast(\n      searchText,\n      setSelectedDate,\n      setForecasts,\n      setLocation,\n      setErrorMessage\n    );\n  }, []);\n\n  return (\n    <div className=\"weather-app\">\n      <LocationDetails\n        city={location.city}\n        country={location.country}\n        errorMessage={errorMessage}\n      />\n      <SearchForm\n        searchText={searchText}\n        setSearchText={setSearchText}\n        onSubmit={handleCitySearch}\n      />\n      {!errorMessage && (\n        <>\n          <ForecastSummaries\n            forecasts={forecasts}\n            onForecastSelect={handleForecastSelect}\n          />\n          {selectedForecast && <ForecastDetails forecast={selectedForecast} />}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}